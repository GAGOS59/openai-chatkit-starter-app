import { NextResponse } from "next/server";

export const dynamic = "force-dynamic";
export const revalidate = 0;
export const runtime = "nodejs";

/* ---------- Types ---------- */
type Stage =
  | "Intake"
  | "DurÃ©e"
  | "Contexte"
  | "Ã‰valuation"
  | "Setup"
  | "Tapping"
  | "RÃ©Ã©valuation"
  | "ClÃ´ture";

type Slots = {
  intake?: string;
  duration?: string;
  context?: string;
  sud?: number;
  round?: number;
  aspect?: string;
};

type GuideRequest = {
  prompt?: string;
  stage?: Stage;
  etape?: number;
  transcript?: string;
  slots?: Slots;
};

/* ---------- Utils ---------- */
function stepFromStage(stage?: Stage): number {
  switch (stage) {
    case "Intake": return 1;
    case "DurÃ©e": return 2;
    case "Contexte": return 3;
    case "Ã‰valuation": return 4;
    case "Setup": return 5;
    case "Tapping": return 6;
    case "RÃ©Ã©valuation": return 7;
    case "ClÃ´ture": return 8;
    default: return 1;
  }
}

function clean(s: string): string {
  return s.replace(/\s+/g, " ").replace(/\s+([,;:.!?])/g, "$1").trim();
}

/** Normalise lâ€™intake ("j'ai mal aux Ã©paules" -> "mal aux Ã©paules", etc.) */
function normalizeIntake(input: string): string {
  const s = input.trim().replace(/\s+/g, " ");

  // j'ai mal Ã /au/aux/Ã  la/Ã  l'...
  const mMal =
    s.match(/^j['â€™]ai\s+mal\s+(?:Ã |a)\s+(?:(?:la|le|les)\s+|l['â€™]\s*|au\s+|aux\s+)?(.+)$/i);
  if (mMal) return `mal ${mMal[1].trim()}`;

  // j'ai une/la douleur ...
  const mDouleur = s.match(/^j['â€™]ai\s+(?:une|la)\s+douleur\s+(.*)$/i);
  if (mDouleur) return `douleur ${mDouleur[1].trim()}`;

  // j'ai (une/la) peur ..., j'ai peur ...
  const mPeur1 = s.match(/^j['â€™]ai\s+(?:une|la)\s+peur\s+(.*)$/i);
  if (mPeur1) return `peur ${mPeur1[1].trim()}`;
  const mPeur2 = s.match(/^j['â€™]ai\s+peur\s+(.*)$/i);
  if (mPeur2) return `peur ${mPeur2[1].trim()}`;

  // j'ai (une/la) tension|gÃªne|gene ...
  const mAutres = s.match(/^j['â€™]ai\s+(?:une|la)\s+(tension|gÃªne|gene)\s+(.*)$/i);
  if (mAutres) return `${mAutres[1]} ${mAutres[2].trim()}`;

  return s;
}

function splitContext(ctx: string): string[] {
  return ctx
    .split(/[,.;]|(?:\s(?:et|quand|parce que|lorsque|depuis|depuis que)\s)/gi)
    .map((p) => clean(p))
    .filter((p) => p.length > 0)
    .slice(0, 6);
}

function detectGender(intakeRaw: string): "m" | "f" {
  const s = clean(intakeRaw).toLowerCase();
  if (s.startsWith("mal") || s.startsWith("serrement") || s.startsWith("truc")) return "m";
  if (
    s.startsWith("douleur") || s.startsWith("peur") || s.startsWith("gÃªne") || s.startsWith("gene") ||
    s.startsWith("tension") || s.startsWith("colÃ¨re") || s.startsWith("colere") ||
    s.startsWith("crispation") || s.startsWith("tristesse")
  ) return "f";
  return "f";
}

function sudQualifierFromNumber(sud?: number, g: "m" | "f" = "f"): string {
  if (typeof sud !== "number" || sud === 0) return "";
  if (sud >= 9) return g === "m" ? " vraiment trÃ¨s prÃ©sent" : " vraiment trÃ¨s prÃ©sente";
  if (sud >= 7) return g === "m" ? " trÃ¨s prÃ©sent" : " trÃ¨s prÃ©sente";
  if (sud >= 4) return g === "m" ? " encore prÃ©sent" : " encore prÃ©sente";
  return " qui reste encore un peu";
}

function baseFromIntake(_raw: string): { generic: string; short: string; g: "m" | "f" } {
  const intake = clean(normalizeIntake(_raw)); // <â€” normalisation sÃ»re
  const g = detectGender(intake);
  if (g === "m" && /^mal\b/i.test(intake)) {
    return { generic: "Ce " + intake, short: "Ce " + intake, g };
  }
  if (g === "f") {
    return { generic: "Cette " + intake, short: "Cette " + intake, g };
  }
  return { generic: "Ce problÃ¨me", short: "Ce problÃ¨me", g: "m" };
}

function buildRappelPhrases(slots: Slots): string[] {
  const intake = clean(normalizeIntake(slots.intake ?? ""));
  const ctx = clean(slots.context ?? "");
  const { generic, short, g } = baseFromIntake(intake);
  const sudQ = sudQualifierFromNumber(slots.sud, g);
  const round = slots.round ?? 1;
  const contextParts = ctx ? splitContext(ctx) : [];

  const roundMod =
    typeof slots.sud === "number" && slots.sud > 0 && round > 1
      ? (slots.sud >= 7 ? " toujours" : " encore")
      : "";

  const qOrRound = sudQ || roundMod;

  const phrases: string[] = [];
  phrases.push(`${generic}${qOrRound}.`);
  phrases.push(`${short}.`);
  for (let i = 0; i < 4; i++) {
    if (contextParts[i]) {
      const s = contextParts[i];
      const sentence = s[0].toUpperCase() + s.slice(1) + ".";
      phrases.push(sentence);
    } else {
      phrases.push(`${(i % 2 === 0) ? generic : short}${qOrRound}.`);
    }
  }
  if (contextParts[0]) phrases.push(`Tout ce contexte : ${contextParts[0]}.`);
  else phrases.push(`${short}.`);
  phrases.push(`${generic}.`);
  return phrases.slice(0, 8);
}

/* ---------- Classification Intake ---------- */
type IntakeKind = "physique" | "emotion" | "situation";

function classifyIntake(raw: string): IntakeKind {
  const s = clean(normalizeIntake(raw)).toLowerCase();

  // Douleur / sensation physique:
  if (
    /\bmal\b|\bdouleur\b|\btension\b|\bgÃªne\b|\bgene\b|\bcrispation\b|\bbrÃ»lure\b|\bbrulure\b|\bpiqÃ»re\b|\baguille\b/.test(s)
  ) return "physique";

  // Ã‰motions courantes:
  if (/\bpeur\b|\bcol[Ã¨e]re\b|\btristesse\b|\bhonte\b|\bculpabilit[Ã©e]\b|\bstress\b|\banxi[Ã©e]t[Ã©e]\b|\binqui[Ã©e]tude\b/.test(s))
    return "emotion";

  // Par dÃ©faut: situation/Ã©vÃ©nement
  return "situation";
}

/* ---------- Safety patterns (in/out) ---------- */
const CRISIS_PATTERNS: RegExp[] = [
  /\bsuicid(e|er|aire|al|ale|aux|erai|erais|erait|eront)?\b/i,
  /\bsu[cs]sid[ea]\b/i,
  /\bje\s+(veux|vais|voudrais)\s+mour(ir|ire)\b/i,
  /\bje\s+ne\s+veux\s+plus\s+vivre\b/i,
  /j['â€™]?en\s+peux?\s+plus\s+de\s+vivre\b/i,
  /j['â€™]?en\s+ai\s+marre\s+de\s+(cette\s+)?vie\b/i,
  /\bje\s+(veux|vais|voudrais)\s+en\s+finir\b/i,
  /\bmettre\s+fin\s+Ã \s+(ma|mes)\s+jours?\b/i,
  /\b(foutre|jeter)\s+en\s+l[â€™']?air\b/i,
  /\bje\s+(veux|voudrais|vais)\s+dispara[iÃ®]tre\b/i,
  /\bplus\s+(envie|go[uÃ»]t)\s+de\s+vivre\b/i,
  /\b(kill\s+myself|i\s+want\s+to\s+die|suicide)\b/i,
  /\bje\s+suis\s+de\s+trop\b/i,
  /\bje\s+me\s+sens\s+de\s+trop\b/i,
  /\bid[Ã©e]es?\s+noires?\b/i,
];

function isCrisis(text: string): boolean {
  const t = text.toLowerCase();
  return CRISIS_PATTERNS.some((rx) => rx.test(t));
}

function crisisMessage(): string {
  return (
`Message important
Il semble que vous traversiez un moment trÃ¨s difficile.
Je ne suis pas un service d'urgence, mais votre sÃ©curitÃ© est prioritaire.

En France : appelez immÃ©diatement le 15 (SAMU) ou le 3114 (prÃ©vention du suicide, 24/7).
En danger immÃ©diat : appelez le 112.

Vous n'Ãªtes pas seulÂ·e â€” ces services peuvent vous aider dÃ¨s maintenant.`
  );
}

/* ---------- SYSTEM (pour les Ã©tapes non dÃ©terministes) ---------- */
const SYSTEM = `
Tu es l'assistante EFT officielle de l'Ã‰cole EFT France (Gary Craig).
Style: clair, bienveillant, concis. Aucune recherche Internet. Pas de diagnostic.

FLUX
1) Intake â€” qualitÃ©/localisation (si douleur) OU "oÃ¹ dans le corps ?" (si Ã©motion) OU "que ressens-tu quand tu penses Ã  â€¦ ?" (si situation).
2) DurÃ©e â€” depuis quand.
3) Contexte â€” circonstances/Ã©vÃ©nements (pas "Ã©motions" si l'intake est dÃ©jÃ  une Ã©motion).
4) Ã‰valuation â€” SUD (0â€“10) pour la premiÃ¨re fois.
5) Setup â€” Phrase de prÃ©paration (PK Ã—3) puis attendre un message de l'utilisateur.
7) RÃ©Ã©valuation â€” SUD ; si >0 â†’ nouvelle ronde ; si =0 â†’ ClÃ´ture.
8) ClÃ´ture â€” remercier, fÃ©liciter, pause/hydratation, note de prudence.

LANGAGE
- Pas de fillers. Utiliser uniquement les mots fournis (slots).
- Une seule consigne par message (sauf Setup: 2 lignes max).
- Commencer par "Ã‰tape {N} â€” ".
`;

/* ---------- Handler ---------- */
export async function POST(req: Request) {
  try {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: "Server misconfigured" }, { status: 500 });
    }
    const base = (process.env.LLM_BASE_URL || "").trim() || "https://api.openai.com";
    const endpoint = `${base.replace(/\/+$/, "")}/v1/responses`;

    const raw = (await req.json().catch(() => ({}))) as Partial<GuideRequest>;
    const prompt = typeof raw.prompt === "string" ? raw.prompt.slice(0, 2000) : "";

    // ðŸ”’ Garde ENTRANT (avant tout)
    if (prompt && isCrisis(prompt)) {
      return NextResponse.json({ answer: crisisMessage() });
    }

    const stage = (raw.stage as Stage) ?? "Intake";
    const etapeClient = Number.isFinite(raw.etape) ? Number(raw.etape) : stepFromStage(stage);
    const transcript = typeof raw.transcript === "string" ? raw.transcript.slice(0, 4000) : "";
    const slots = (raw.slots && typeof raw.slots === "object" ? (raw.slots as Slots) : {}) ?? {};
    const etape = Math.min(8, Math.max(1, etapeClient));

    /* ---------- Ã‰tape 1 : dÃ©terministe et contextualisÃ©e ---------- */
    if (etape === 1) {
      const intakeRaw = slots.intake ?? prompt ?? "";
      const intake = clean(normalizeIntake(intakeRaw));
      const kind = classifyIntake(intake);

      if (kind === "physique") {
        const txt =
"Ã‰tape 1 â€” Peux-tu prÃ©ciser la localisation exacte de la douleur et le type de douleur (lancinante, sourde, aiguÃ«, comme une aiguille, etc.) ?";
        return NextResponse.json({ answer: txt });
      }
      if (kind === "emotion") {
        const txt =
"Ã‰tape 1 â€” OÃ¹ ressens-tu cette Ã©motion dans ton corps (poitrine, gorge, ventre, tÃªteâ€¦) ? Donne aussi quelques mots pour la dÃ©crire (serrement, pression, chaleur, vide, etc.).";
        return NextResponse.json({ answer: txt });
      }
      // situation par dÃ©faut
      const txt =
"Ã‰tape 1 â€” Quand tu penses Ã  cette situation, quâ€™est-ce que tu ressens (Ã©motion/sensation) et oÃ¹ dans le corps (poitrine, ventre, gorgeâ€¦) ?";
      return NextResponse.json({ answer: txt });
    }

    // Ã‰tape 5 â€” setup dÃ©terministe
    if (etape === 5) {
      const aspect = clean(slots.aspect ?? slots.intake ?? "");
      const txt =
`Ã‰tape 5 â€” Setup : Â« MÃªme si jâ€™ai ce ${aspect}, je mâ€™accepte profondÃ©ment et complÃ¨tement. Â»
RÃ©pÃ©tez cette phrase 3 fois en tapotant sur le Point KaratÃ© (tranche de la main).
Quand câ€™est fait, envoyez un OK et nous passerons Ã  la ronde.`;
      return NextResponse.json({ answer: txt });
    }

    // Ã‰tape 6 â€” ronde dÃ©terministe (personnalisÃ©e)
    if (etape === 6) {
      const p = buildRappelPhrases(slots);
      const txt =
`Ã‰tape 6 â€”

- ST : ${p[0]}
- DS : ${p[1]}
- CO : ${p[2]}
- SO : ${p[3]}
- SN : ${p[4]}
- MT : ${p[5]}
- CL : ${p[6]}
- SB : ${p[7]}
Quand tu as terminÃ© cette ronde, dis-moi ton SUD (0â€“10).`;
      return NextResponse.json({ answer: txt });
    }

    // Ã‰tape 8 â€” clÃ´ture stable
    if (etape === 8) {
      const txt =
"Ã‰tape 8 â€” Bravo pour le travail fourni. FÃ©licitations pour cette belle avancÃ©e. Prends un moment pour t'hydrater et te reposer. Rappelle-toi que ce guide est Ã©ducatif et ne remplace pas un avis mÃ©dical.";
      return NextResponse.json({ answer: txt });
    }

    /* ---------- Autres Ã©tapes : modÃ¨le (SYSTEM) ---------- */
    const USER_BLOCK =
`[CONTEXTE]
Ã‰tape demandÃ©e: ${etape}
Slots:
- intake="${slots.intake ?? ""}"
- duration="${slots.duration ?? ""}"
- context="${slots.context ?? ""}"
- sud=${Number.isFinite(slots.sud) ? slots.sud : "NA"}
- round=${Number.isFinite(slots.round) ? slots.round : "NA"}
- aspect="${slots.aspect ?? ""}"

[DERNIER MESSAGE UTILISATEUR]
${prompt}

[HISTORIQUE (court)]
${transcript}

[INSTRUCTION]
Produis UNIQUEMENT le texte de l'Ã©tape ${etape}, concis, au bon format.`;

    const controller = new AbortController();
    const timer = setTimeout(() => controller.abort(), 15000);

    const res = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        input: `${SYSTEM}\n\n${USER_BLOCK}`,
        temperature: 0.2,
        max_output_tokens: 260,
      }),
      signal: controller.signal,
    }).catch(() => {
      throw new Error("Upstream error");
    });
    clearTimeout(timer);

    if (!res || !res.ok) {
      return NextResponse.json({ error: "Upstream failure" }, { status: 502 });
    }

    const json = await res.json();
    const answer =
      (json?.output?.[0]?.content?.[0]?.text) ??
      (json?.choices?.[0]?.message?.content) ??
      (json?.content?.[0]?.text) ??
      "";

    // ðŸ”’ Garde SORTANT
    const FORBIDDEN_OUTPUT: RegExp[] = [
      ...CRISIS_PATTERNS,
      /\bsuicid\w*/i,
      /\b(euthanasie|me\s+tuer|me\s+supprimer)\b/i,
    ];
    const unsafeOut = answer && FORBIDDEN_OUTPUT.some((rx) => rx.test(answer));
    if (unsafeOut) {
      return NextResponse.json({ answer: crisisMessage() });
    }

    return NextResponse.json({ answer });
  } catch {
    return NextResponse.json({ error: "Unexpected server error" }, { status: 500 });
  }
}
