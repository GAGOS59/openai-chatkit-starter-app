import { NextResponse } from "next/server";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// Types stricts pour la rÃ©ponse OpenAI
interface OAChatMessage { content: string }
interface OAChatChoice { message: OAChatMessage }
interface OAResponse { choices: OAChatChoice[] }

// VÃ©rifications de type
function isRecord(u: unknown): u is Record<string, unknown> {
  return typeof u === "object" && u !== null;
}
function isOAResponse(u: unknown): u is OAResponse {
  if (!isRecord(u)) return false;
  const choices = u["choices"];
  if (!Array.isArray(choices) || choices.length === 0) return false;
  const first = choices[0];
  if (!isRecord(first)) return false;
  const msg = (first as Record<string, unknown>)["message"];
  if (!isRecord(msg)) return false;
  const content = (msg as Record<string, unknown>)["content"];
  return typeof content === "string";
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const message = typeof body?.message === "string" ? body.message.trim() : "";
    const history = Array.isArray(body?.history) ? body.history : [];

    // ðŸ”¹ Brief EFT rigoureux
    const system =
  typeof body?.system === "string"
    ? body.system
    : [
        `Tu es un guide EFT formÃ© Ã  la mÃ©thode officielle de Gary Craig et de GeneviÃ¨ve Gagos.
        TOn obbjectif est de guider la personne pas Ã  pas.

RÃˆGLES Dâ€™INTERACTION :
1) Pose TOUJOURS UNE SEULE question par message.
2) Structure par Ã©tapes : Ã‰tape 1 â€” [question]. Attendre la rÃ©ponse. Puis Ã‰tape 2 â€” [question], etc.
3) Si rÃ©ponse partielle : reformule trÃ¨s briÃ¨vement et passe Ã  lâ€™Ã©tape suivante (toujours 1 question).
4) Reste concise, empathique, sans jargon.
5) Si lâ€™utilisateur demande dâ€™aller plus vite : maximum 2 questions dans le message.
6) Pas de diagnostic ; oriente vers un professionnel si nÃ©cessaire.

- Si la personne parle d'une situation, reste focalisÃ© sur ce qu'elle ressent dans son corps lorsqu'elle pense Ã  cette situation, avant mÃªme de pouvoir nommer une Ã©motion.
- Si la personne parle d'une douleur, demande la localisation, le type de douleur (lancinante, sourde...). puis intÃ©resse-toi Ã  depuis combien de temps as-tu cette douleur ; que se passait-il dans ta vie Ã  ce moment ? car tu pourrais lÃ  aussi mettre en Ã©vidence une situation. Le cas Ã©chÃ©ant reste sur la douleur.
- Ne PAS adoucir, ni reformuler en positif les phrases.
- Phrase dâ€™acceptation complÃ¨te au point karatÃ© : "MÃªme si jâ€™ai [ZZZZZT], je mâ€™aime et je mâ€™accepte profondÃ©ment et complÃ¨tement."
- Phrases de rappel centrÃ©es sur le ressenti dans la situation pendant la sÃ©quence.
- VÃ©rifier lâ€™intensitÃ© AVANT et APRÃˆS (0â€“10), proposer un nouveau tour si > 0.
- Si rÃ©ponse vague ("Ã§a va"), demander : "Et si tu devais mettre une valeur entre 0 et 10, ce serait combien ?"
- Si intensitÃ© â‰¥ 8 ou souvenir difficile : ronde globale brÃ¨ve, puis proposer dâ€™arrÃªter et consulter un praticien EFT certifiÃ©.
- Ordre des points : Sommet de la tÃªte â†’ DÃ©but du sourcil â†’ Coin de lâ€™Å“il â†’ Sous lâ€™Å“il â†’ Sous le nez â†’ Menton â†’ Clavicule â†’ Sous le bras â†’ Point karatÃ©.
- Ton : neutre, bienveillant, rigoureux, tutoiement par dÃ©faut.
RÃ©ponds en franÃ§ais, sans emojis.
- Ne t'autorise aucune digression, ni inspiration sur tout ce que tu vois sur Internet au sujet de l'EFT. Tu dois impÃ©rativement suivre mes indications et elles seules. Par exemple : pas de retour au point karatÃ© en fin de ronde.`,

        "Toujours rappeler le cadre : lâ€™EFT ne remplace pas un avis mÃ©dical ; consulter si douleur persistante/alarmante.",
      ].join("\n");
    

    if (!message) {
      return NextResponse.json({ error: "Champ 'message' requis." }, { status: 400 });
    }

    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: "ClÃ© API manquante cÃ´tÃ© serveur." }, { status: 500 });
    }

    const messages = [
      { role: "system", content: system },
      ...history,
      { role: "user", content: message },
    ];

    const upstream = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "content-type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages,
        temperature: 0.2, // ðŸ”¹ ton neutre, pas de dÃ©rive positive
      }),
    });

    if (!upstream.ok) {
      const text = await upstream.text();
      return NextResponse.json(
        { error: "Service indisponible", code: upstream.status, details: text },
        { status: 502 }
      );
    }

    const raw: unknown = await upstream.json();
    if (!isOAResponse(raw)) {
      return NextResponse.json({ error: "Format de rÃ©ponse inattendu." }, { status: 502 });
    }

    const answer = raw.choices[0].message.content.trim();
    if (!answer) {
      return NextResponse.json({ error: "RÃ©ponse vide du modÃ¨le." }, { status: 502 });
    }

    return NextResponse.json({ ok: true, answer });
  } catch (error: unknown) {
    console.error("[guide-eft] route error:", error);
    return NextResponse.json({ error: "Erreur serveur." }, { status: 500 });
  }
}

