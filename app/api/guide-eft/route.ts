import { NextResponse } from "next/server";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// Types stricts pour la r√©ponse OpenAI
interface OAChatMessage { content: string }
interface OAChatChoice { message: OAChatMessage }
interface OAResponse { choices: OAChatChoice[] }

// V√©rifications de type
function isRecord(u: unknown): u is Record<string, unknown> {
  return typeof u === "object" && u !== null;
}
function isOAResponse(u: unknown): u is OAResponse {
  if (!isRecord(u)) return false;
  const choices = u["choices"];
  if (!Array.isArray(choices) || choices.length === 0) return false;
  const first = choices[0];
  if (!isRecord(first)) return false;
  const msg = (first as Record<string, unknown>)["message"];
  if (!isRecord(msg)) return false;
  const content = (msg as Record<string, unknown>)["content"];
  return typeof content === "string";
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const message = typeof body?.message === "string" ? body.message.trim() : "";
    const history = Array.isArray(body?.history) ? body.history : [];

    // üîπ Brief EFT rigoureux
    const system =
      typeof body?.system === "string"
        ? body.system
        : [
            "Tu es un guide EFT strictement align√© avec la m√©thode de Gary Craig.",
            "R√®gles imp√©ratives :",
            "- Pas d‚Äôinductions positives ni d‚Äôaffirmations valorisantes AU D√âBUT.",
            "- Rester neutre et sp√©cifique (¬´ cette douleur au dos ¬ª, ¬´ ce tiraillement c√¥t√© droit‚Ä¶ ¬ª).",
            "- Protocoles : phrase de d√©part (revers psychologique) sur point Karat√©, puis phrase-rappel courte sur chaque point.",
            "- Toujours demander la mesure d‚Äôintensit√© (SUD 0‚Äì10) avant et apr√®s une ou deux rondes.",
            "- Traiter UN ASPECT √Ä LA FOIS (qualit√© de la douleur, localisation, d√©clencheur, √©motion li√©e‚Ä¶).",
            "- NE PAS proposer de reframes/positifs tant que SUD > 2.",
            "- Si SUD stagne : tester inversion psychologique, changement d‚Äôaspect, formulation plus sp√©cifique, ou √©v√©nement-cible.",
            "- Rappeler que l‚ÄôEFT ne remplace pas un avis m√©dical et inviter √† consulter si douleur persistante ou alarmante.",
            "Format attendu :",
            "1) Clarification rapide (sp√©cificit√© + SUD).",
            "2) Phrase de d√©part (neutre/acceptation) x3 sur point Karat√©.",
            "3) S√©quence des points avec phrase-rappel neutre (pas de positif).",
            "4) R√©√©valuation SUD et choix de l‚Äôaspect suivant.",
            "5) R√©p√©ter. Reframes √©ventuels UNIQUEMENT quand SUD ‚â§ 2.",
          ].join("\n");

    if (!message) {
      return NextResponse.json({ error: "Champ 'message' requis." }, { status: 400 });
    }

    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: "Cl√© API manquante c√¥t√© serveur." }, { status: 500 });
    }

    const messages = [
      { role: "system", content: system },
      ...history,
      { role: "user", content: message },
    ];

    const upstream = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "content-type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages,
        temperature: 0.2, // üîπ ton neutre, pas de d√©rive positive
      }),
    });

    if (!upstream.ok) {
      const text = await upstream.text();
      return NextResponse.json(
        { error: "Service indisponible", code: upstream.status, details: text },
        { status: 502 }
      );
    }

    const raw: unknown = await upstream.json();
    if (!isOAResponse(raw)) {
      return NextResponse.json({ error: "Format de r√©ponse inattendu." }, { status: 502 });
    }

    const answer = raw.choices[0].message.content.trim();
    if (!answer) {
      return NextResponse.json({ error: "R√©ponse vide du mod√®le." }, { status: 502 });
    }

    return NextResponse.json({ ok: true, answer });
  } catch (error: unknown) {
    console.error("[guide-eft] route error:", error);
    return NextResponse.json({ error: "Erreur serveur." }, { status: 500 });
  }
}

