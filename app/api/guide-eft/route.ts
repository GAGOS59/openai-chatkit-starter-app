import { NextResponse } from "next/server";

export const dynamic = "force-dynamic";
export const revalidate = 0;
export const runtime = "nodejs";

type Stage =
  | "Intake"
  | "Dur√©e"
  | "Contexte"
  | "√âvaluation"
  | "Setup"
  | "Tapping"
  | "R√©√©valuation"
  | "Cl√¥ture";

type Slots = {
  intake?: string;
  duration?: string;
  context?: string;
  sud?: number;
  round?: number;
  aspect?: string;
};

type GuideRequest = {
  prompt?: string;
  stage?: Stage;
  etape?: number;
  transcript?: string;
  slots?: Slots;
};

function stepFromStage(stage?: Stage): number {
  switch (stage) {
    case "Intake": return 1;
    case "Dur√©e": return 2;
    case "Contexte": return 3;
    case "√âvaluation": return 4;
    case "Setup": return 5;
    case "Tapping": return 6;
    case "R√©√©valuation": return 7;
    case "Cl√¥ture": return 8;
    default: return 1;
  }
}

/* ---- utils ---- */
function clean(s: string): string {
  return s.replace(/\s+/g, " ").replace(/\s+([,;:.!?])/g, "$1").trim();
}
function splitContext(ctx: string): string[] {
  return ctx
    .split(/[,.;]|(?:\s(?:et|quand|parce que|lorsque|depuis|depuis que)\s)/gi)
    .map((p) => clean(p))
    .filter((p) => p.length > 0)
    .slice(0, 6);
}
function detectGender(intakeRaw: string): "m" | "f" {
  const s = clean(intakeRaw).toLowerCase();
  if (s.startsWith("mal")|| s.startsWith("serrement") || s.startsWith("truc") ) return "m";
  if (s.startsWith("douleur") || s.startsWith("peur") || s.startsWith("g√™ne") || s.startsWith("boule") ||s.startsWith("gene") || s.startsWith("tension") || s.startsWith("col√®re") || s.startsWith("crispation") || s.startsWith("colere") || s.startsWith("tristesse")) {
    return "f";
  }
  return "f";
}
function sudQualifierFromNumber(sud?: number, g: "m" | "f" = "f"): string {
  if (typeof sud !== "number" || sud === 0) return "";
   if (sud >= 9) return g === "m" ? " vraiment tr√®s pr√©sent" : " vraiment tr√®s pr√©sente";
  if (sud >= 7) return g === "m" ? " tr√®s pr√©sent" : " tr√®s pr√©sente";
  if (sud >= 4) return g === "m" ? " encore pr√©sent" : " encore pr√©sente";
  return " qui reste encore un peu";
}
function baseFromIntake(intakeRaw: string): { generic: string; short: string; g: "m" | "f" } {
  const intake = clean(intakeRaw);
  const g = detectGender(intakeRaw);
  if (g === "m" && /^mal\b/i.test(intake)) {
    return { generic: " Ce " + intake, short: " Ce " + intake, g };
  }
  if (g === "f") {
    return { generic: " Cette " + intake, short: " Cette " + intake, g };
  }
  return { generic: " Ce probl√®me", short: " Ce probl√®me", g: "m" };
}
function buildRappelPhrases(slots: Slots): string[] {
  const intake = clean(slots.intake ?? "");
  const ctx = clean(slots.context ?? "");
  const { generic, short, g } = baseFromIntake(intake);
  const sudQ = sudQualifierFromNumber(slots.sud, g);
  const round = slots.round ?? 1;
  const contextParts = ctx ? splitContext(ctx) : [];

  const roundMod =
    typeof slots.sud === "number" && slots.sud > 0 && round > 1
      ? (slots.sud >= 7 ? " toujours" : " encore")
      : "";

  const qOrRound = sudQ || roundMod;

  const phrases: string[] = [];
  phrases.push(`${generic}${qOrRound}.`);
  phrases.push(`${short}.`);
  for (let i = 0; i < 4; i++) {
    if (contextParts[i]) {
      const sentence = contextParts[i][0].toUpperCase() + contextParts[i].slice(1) + ".";
      phrases.push(sentence);
    } else {
      phrases.push(`${(i % 2 === 0) ? generic : short}${qOrRound}.`);
    }
  }
  if (contextParts[0]) phrases.push(`Tout ce contexte : ${contextParts[0]}.`);
  else phrases.push(`${short}.`);
  phrases.push(`${generic}.`);
  return phrases.slice(0, 8);
}

/* ---- SYSTEM ---- */
const SYSTEM = `
Tu es l'assistante EFT officielle de l'√âcole EFT France (Gary Craig).
Style: clair, bienveillant, concis. Aucune recherche Internet. Pas de diagnostic.

FLUX
1) Intake ‚Äî qualit√© + localisation (ou libell√© pr√©cis si √©motion).
2) Dur√©e ‚Äî depuis quand.
3) Contexte ‚Äî circonstances/√©v√©nements/√©motions.
4) √âvaluation ‚Äî SUD (0‚Äì10) pour la premi√®re fois.
5) Setup ‚Äî Phrase de pr√©paration (PK √ó3) puis attendre un message de l'utilisateur (sans insister).
7) R√©√©valuation ‚Äî SUD ; si >0 ‚Üí nouvelle ronde ; si =0 ‚Üí Cl√¥ture.
8) Cl√¥ture ‚Äî remercier, f√©liciter, pause/hydratation, note de prudence.

LANGAGE
- Pas de fillers. Utiliser uniquement les mots fournis (slots).
- Une seule consigne par message (sauf Setup: 2 lignes max).
- Commencer par "√âtape {N} ‚Äî ".
`;

/* ---- Handler ---- */
export async function POST(req: Request) {
  try {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: "Server misconfigured" }, { status: 500 });
    }
    const base = (process.env.LLM_BASE_URL || "").trim() || "https://api.openai.com";
    const endpoint = `${base.replace(/\/+$/,"")}/v1/responses`;

    const raw = (await req.json().catch(() => ({}))) as Partial<GuideRequest>;
    const prompt = typeof raw.prompt === "string" ? raw.prompt.slice(0, 2000) : "";

    /* üõë Bloc de s√©curit√© : pr√©vention suicide */
    const risque = [
      "suicide",  "suisside", "me tuer", "je veux mourir", "je veux me tuer",  "je vais en finir",  "mettre fin √† ses jours", "mettre fin √† mes jours", 
      "marre de la vie", "me foutre en l'air",  "id√©es noires",  "id√©e noire",  "je veux en finir",  "suicider",  "suicidale", "kill myself", "i want to die",
      "je n'en peux plus de vivre", "je veux dispara√Ætre", "je ne veux plus vivre", "plus vivre"
    ];
    const texte = prompt.toLowerCase();
    if (risque.some(mot => texte.includes(mot))) {
      return NextResponse.json({
        answer: `‚ö†Ô∏è **Message important :** ‚ö†Ô∏è
Il semble que vous traversiez un moment tr√®s difficile.  
Je ne suis pas un service d‚Äôurgence, mais votre s√©curit√© est prioritaire.  

**Appelez imm√©diatement le 15** (urgences m√©dicales en France),  
ou contactez le **3114**, le **num√©ro national de pr√©vention du suicide**,  
gratuit et disponible 24h/24, 7j/7.  

Si vous √™tes √† l‚Äô√©tranger, composez le num√©ro d‚Äôurgence local.  
Vous n‚Äô√™tes pas seul¬∑e ‚Äî il existe des personnes pr√™tes √† vous aider.`
      });
    }
    /* Fin du bloc s√©curit√© */

    const stage = (raw.stage as Stage) ?? "Intake";
    const etapeClient = Number.isFinite(raw.etape) ? Number(raw.etape) : stepFromStage(stage);
    const transcript = typeof raw.transcript === "string" ? raw.transcript.slice(0, 4000) : "";
    const slots = (raw.slots && typeof raw.slots === "object" ? (raw.slots as Slots) : {}) ?? {};
    const etape = Math.min(8, Math.max(1, etapeClient));

    // √âtape 5 : Setup d√©terministe
    if (etape === 5) {
      const aspect = clean(slots.aspect ?? slots.intake ?? "");
      const txt =
`√âtape 5 ‚Äî Setup : ¬´ M√™me si j‚Äôai ce ${aspect}, je m‚Äôaccepte profond√©ment et compl√®tement. ¬ª
R√©p√©tez cette phrase 3 fois en tapotant sur le Point Karat√© (tranche de la main).
Quand c‚Äôest fait, envoyez un OK et nous passerons √† la ronde.`;
      return NextResponse.json({ answer: txt });
    }

    // √âtape 6 : Ronde
    if (etape === 6) {
      const p = buildRappelPhrases(slots);
      const txt =
`√âtape 6 ‚Äî

- ST : ${p[0]}
- DS : ${p[1]}
- CO : ${p[2]}
- SO : ${p[3]}
- SN : ${p[4]}
- MT : ${p[5]}
- CL : ${p[6]}
- SB : ${p[7]}
Quand tu as termin√© cette ronde, dis-moi ton SUD (0‚Äì10).`;
      return NextResponse.json({ answer: txt });
    }

    // √âtape 8 : Cl√¥ture
    if (etape === 8) {
      const txt =
"√âtape 8 ‚Äî Bravo pour le travail fourni. F√©licitations pour cette belle avanc√©e. Prends un moment pour t'hydrater et te reposer. Rappelle-toi que ce guide est √©ducatif et ne remplace pas un avis m√©dical.";
      return NextResponse.json({ answer: txt });
    }

    // √âtapes interm√©diaires
    const USER_BLOCK =
`[CONTEXTE]
√âtape demand√©e: ${etape}
Slots:
- intake="${slots.intake ?? ""}"
- duration="${slots.duration ?? ""}"
- context="${slots.context ?? ""}"
- sud=${Number.isFinite(slots.sud) ? slots.sud : "NA"}
- round=${Number.isFinite(slots.round) ? slots.round : "NA"}
- aspect="${slots.aspect ?? ""}"

[DERNIER MESSAGE UTILISATEUR]
${prompt}

[HISTORIQUE (court)]
${transcript}

[INSTRUCTION]
Produis UNIQUEMENT le texte de l'√©tape ${etape}, concis, au bon format.`;

    const controller = new AbortController();
    const timer = setTimeout(() => controller.abort(), 15000);

    const res = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        input: `${SYSTEM}\n\n${USER_BLOCK}`,
        temperature: 0.2,
        max_output_tokens: 260,
      }),
      signal: controller.signal,
    }).catch(() => {
      throw new Error("Upstream error");
    });
    clearTimeout(timer);

    if (!res || !res.ok) {
      return NextResponse.json({ error: "Upstream failure" }, { status: 502 });
    }

    const json = await res.json();
    const answer =
      (json?.output?.[0]?.content?.[0]?.text) ??
      (json?.choices?.[0]?.message?.content) ??
      (json?.content?.[0]?.text) ??
      "";

    // --- Garde-fou sortie mod√®le (ban mots/expressions sensibles) ---
const FORBIDDEN_OUTPUT: RegExp[] = [
  ...CRISIS_PATTERNS,                    // r√©utilise la liste de crise
  /\bsuicid\w*/i,                        // filet large
  /\b(euthanasie|me\s+tuer|me\s+supprimer)\b/i
];

const unsafeOut = answer && FORBIDDEN_OUTPUT.some(rx => rx.test(answer));
if (unsafeOut) {
  return NextResponse.json({
    answer:
`‚ö†Ô∏è Message important
Un contenu sensible a √©t√© d√©tect√©.
Je ne suis pas un service d'urgence.

‚û°Ô∏è En France : appelez imm√©diatement le 15 (SAMU) ou le 3114 (24/7).
‚û°Ô∏è En danger imm√©diat : appelez le 112.

Votre s√©curit√© est la priorit√©.`
  });
}

    return NextResponse.json({ answer });
  } catch {
    return NextResponse.json({ error: "Unexpected server error" }, { status: 500 });
  }
}
